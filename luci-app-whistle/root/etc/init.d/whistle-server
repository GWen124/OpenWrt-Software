#!/bin/sh /etc/rc.common

# 开机启动和关机关闭的优先级
START=99
STOP=10

# 日志
export logEnabled=0; # 0 == false, 1 == true
export logFilePath="/var/log/whistle-server.log";

#start_service函数：负责程序的启动
start() {
    log "准备启动服务";

    #收集参数
    export commandParam="-M prod";

    # 监听网卡
    export host=$(uci get whistle.config.host);
    if [ -n $host ] ; then
        commandParam="$commandParam -H $host";
    fi

    # 监听端口
    export port=$(uci get whistle.config.port);
    if [ -n $port ] ; then
        commandParam="$commandParam -p $port";
    fi

    # 身份认证
    export auth_enabled=$(uci get whistle.config.auth_enabled);
    if [ $auth_enabled == "true" ] ; then
        export auth_username=$(uci get whistle.config.auth_username);
        export auth_password=$(uci get whistle.config.auth_password);

        if [ -n $auth_username ] && [ -n $auth_password ] ; then
            commandParam="$commandParam -n $auth_username -w $auth_password";
        fi
    fi

    # 自定义证书目录
    export certDir=$(uci get whistle.config.cert_dir);
    if [ -n $certDir ] ; then
        commandParam="$commandParam -z \"$certDir\"";
    fi

    # 构建完整命令
    export command="w2 run $commandParam";

    # 日志 - 在不启用日志的情形，不将日志输出到日志文件
    if [ $logEnabled -ne 1 ] ; then
        logFilePath="/dev/null";
    fi

    # 调试显示环境
    # set;
    # log $command;

    # 服务 - 后台进程模式
    $command 1>>$logFilePath 2>>$logFilePath &

    log "服务已启动";
}

#reload_service函数：在传递reload参数时进行调用，如果没有该函数，将会调用默认start函数
stop() {
    log "准备停止服务";

    # 修复输出内容截断导致找不到数据问题
    export COLUMNS=189;

    # 停止 w2 进程
    local pid=$(ps | grep -v grep | grep "w2 run -M prod" | awk '{print $1; exit;}')
    if [ ! $pid == "" ] ; then # 如果确实存在这个进程的 pid
        kill $pid;
    fi

    # 停止真正执行的 node 进程
    pid=$(ps | grep -v grep | grep "node_modules/whistle/node_modules" | awk '{print $1; exit;}')
    if [ ! $pid == "" ] ; then # 如果确实存在这个进程的 pid
        kill $pid;
    fi
    
    log "服务已停止";
}

# 打印日志 - 主要是开发调试用
log(){
    # 在不启用日志的情况下，就不必执行后面的任务了
    if [ $logEnabled -ne 1 ] ; then
        return;
    fi

    # 格式化日志信息 - 补充日期与时间
    local str="`date +\"%Y-%m-%d %H:%M:%S\"` --- $1"

    # 控制台输出
    echo $str

    # 写入日志文件
    echo $str >> $logFilePath
}


